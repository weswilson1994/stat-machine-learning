plsr_results <- bind_cols(pcr_r_squared, pcr_rmse)
plsr_results
ggplot(data = step_results, aes(x = step_results$Variables)) +
geom_line(mapping = aes(y = step_results$adjusted_r2), color = "red") +
geom_line(mapping = aes(y = pcr_results$r_squared), color = "blue")
ggplot(data = step_results, aes(x = step_results$Variables)) +
geom_line(mapping = aes(y = step_results$adjusted_r2), color = "red") +
geom_line(mapping = aes(y = pcr_results$r_squared), color = "blue") +
geom_line(mapping = aes(y = plsr_results$r_squared), color = "purple")
pcr_results$r_squared
r_squared_data <- cbind(step_results$Variables,
step_r2 = step_results$adjusted_r2,
pcr_r2 = pcr_results$r_squared,
plsr_r2 = plsr_results$r_squared)
r_squared_data
r_squared_data <- cbind(vars = step_results$Variables,
step_r2 = step_results$adjusted_r2,
pcr_r2 = pcr_results$r_squared,
plsr_r2 = plsr_results$r_squared)
r_squared_data
r_squared_data <- cbind(vars = step_results$Variables,
step_r2 = step_results$adjusted_r2,
pcr_r2 = pcr_results$r_squared,
plsr_r2 = plsr_results$r_squared)
View(r_squared_data)
r_squared_data <- cbind(vars = step_results$Variables,
step_r2 = step_results$adjusted_r2,
pcr_r2 = pcr_results$r_squared,
plsr_r2 = plsr_results$r_squared) %>%
as.data.frame()
View(r_squared_data)
ggplot(data = r_squared_data, aes(x = vars, y = step_r2)) +
geom_line(color = "red") +
geom_line(mapping = aes(y = pcr_r2), color = "blue")
ggplot(data = r_squared_data, aes(x = vars, y = step_r2)) +
geom_line(color = "red") +
geom_line(mapping = aes(y = pcr_r2), color = "blue") +
geom_line(mapping = aes(y = plsr_r2), color = "purple") +
labs(x = "Number of Variables", y = "Adjusted R-Squared")
r_squared_data
pls::RMSEP(plsr_model)$val %>%
data.frame()
plsr_model <- plsr(crim ~ ., data = model_data$train,
validation = "CV")
plsr_model <- plsr(crim ~ ., data = model_data$train,
validation = "CV")
plsr_r_squared <- pls::R2(plsr_model)$val %>%
data.frame() %>%
pivot_longer(cols = everything(),
names_to = "component",
values_to = "r_squared") %>%
slice(-1)
plsr_mse <- pls::RMSEP(plsr_model)$val %>%
data.frame() %>%
slice(-1) %>%
pivot_longer(cols = everything(),
names_to = "component",
values_to = "rmse") %>%
slice(-1) %>%
dplyr::select(rmse)
plsr_results <- bind_cols(pcr_r_squared, pcr_rmse)
r_squared_data <- cbind(vars = step_results$Variables,
step_r2 = step_results$adjusted_r2,
pcr_r2 = pcr_results$r_squared,
plsr_r2 = plsr_results$r_squared) %>%
as.data.frame()
ggplot(data = r_squared_data, aes(x = vars, y = step_r2)) +
geom_line(color = "red") +
geom_line(mapping = aes(y = pcr_r2), color = "blue") +
geom_line(mapping = aes(y = plsr_r2), color = "purple") +
labs(x = "Number of Variables", y = "Adjusted R-Squared")
pcr_model <- pcr(crim ~ . -1, data = model_data$train,
validation = "CV")
pcr_r_squared <- pls::R2(pcr_model)$val %>%
data.frame() %>%
pivot_longer(cols = everything(),
names_to = "component",
values_to = "r_squared") %>%
slice(-1)
pcr_rmse <- pls::RMSEP(pcr_model)$val %>%
data.frame() %>%
slice(-1) %>%
pivot_longer(cols = everything(),
names_to = "component",
values_to = "rmse") %>%
slice(-1) %>%
dplyr::select(rmse)
pcr_results <- bind_cols(pcr_r_squared, pcr_rmse)
plsr_model <- plsr(crim ~ ., data = model_data$train,
validation = "CV", scaled = TRUE)
plsr_r_squared <- pls::R2(plsr_model)$val %>%
data.frame() %>%
pivot_longer(cols = everything(),
names_to = "component",
values_to = "r_squared") %>%
slice(-1)
plsr_mse <- pls::RMSEP(plsr_model)$val %>%
data.frame() %>%
slice(-1) %>%
pivot_longer(cols = everything(),
names_to = "component",
values_to = "rmse") %>%
slice(-1) %>%
dplyr::select(rmse)
plsr_results <- bind_cols(pcr_r_squared, pcr_rmse)
r_squared_data <- cbind(vars = step_results$Variables,
step_r2 = step_results$adjusted_r2,
pcr_r2 = pcr_results$r_squared,
plsr_r2 = plsr_results$r_squared) %>%
as.data.frame()
ggplot(data = r_squared_data, aes(x = vars, y = step_r2)) +
geom_line(color = "red") +
geom_line(mapping = aes(y = pcr_r2), color = "blue") +
geom_line(mapping = aes(y = plsr_r2), color = "purple") +
labs(x = "Number of Variables", y = "Adjusted R-Squared")
pcr_model <- pcr(crim ~ . -1, data = model_data$train,
validation = "CV")
pcr_r_squared <- pls::R2(pcr_model)$val %>%
data.frame() %>%
pivot_longer(cols = everything(),
names_to = "component",
values_to = "r_squared") %>%
slice(-1)
pcr_rmse <- pls::RMSEP(pcr_model)$val %>%
data.frame() %>%
slice(-1) %>%
pivot_longer(cols = everything(),
names_to = "component",
values_to = "rmse") %>%
slice(-1) %>%
dplyr::select(rmse)
pcr_results <- bind_cols(pcr_r_squared, pcr_rmse)
plsr_model <- plsr(crim ~ ., data = model_data$train,
validation = "CV")
plsr_r_squared <- pls::R2(plsr_model)$val %>%
data.frame() %>%
pivot_longer(cols = everything(),
names_to = "component",
values_to = "r_squared") %>%
slice(-1)
plsr_mse <- pls::RMSEP(plsr_model)$val %>%
data.frame() %>%
slice(-1) %>%
pivot_longer(cols = everything(),
names_to = "component",
values_to = "rmse") %>%
slice(-1) %>%
dplyr::select(rmse)
plsr_results <- bind_cols(pcr_r_squared, pcr_rmse)
r_squared_data <- cbind(vars = step_results$Variables,
step_r2 = step_results$adjusted_r2,
pcr_r2 = pcr_results$r_squared,
plsr_r2 = plsr_results$r_squared) %>%
as.data.frame()
ggplot(data = r_squared_data, aes(x = vars, y = step_r2)) +
geom_line(color = "red") +
geom_line(mapping = aes(y = pcr_r2), color = "blue") +
geom_line(mapping = aes(y = plsr_r2), color = "purple") +
labs(x = "Number of Variables", y = "Adjusted R-Squared")
#| message: false
#| warning: false
library(tidyverse)
library(ISLR2)
library(pls)
library(MASS)
library(leaps)
library(glmnet)
data("Boston")
data("College")
split_train_and_test_data <- function(split_pct, data, seed){
set.seed(seed)
z <- sample(nrow(data), split_pct * nrow(data))
train <- data[z,]
test <- data[-z,]
return(list(train = train, test = test))
}
calc_mse <- function(y_actual, y_predicted) {
if (!is.vector(y_actual) || !is.vector(y_predicted)) {
warning("Both y_actual and y_predicted should be vectors.")
return(NULL)  # Return NULL to indicate an issue
}
mse <- mean((y_actual - y_predicted)^2)
return(mse)
}
model_data <- split_train_and_test_data(split_pct = .5,
seed = 1234, data = Boston)
pcr_model <- pcr(crim ~ ., data = model_data$train, validation = "CV")
summary(pcr_model)
plsr_model <- plsr(crim ~ ., data = model_data$train, validation = "CV")
summary(plsr_model)
y_train <- model_data$train$crim
full_regression <- lm(crim ~ ., data = model_data$train)
step_output <- step(object = full_regression, method = "backward")
step_summary <- summary(step_output)
step_best_model <- lm(formula = crim ~ zn + nox + rm +
dis + rad + ptratio +
lstat + medv, data = model_data$train)
step_predictions <- predict(object = step_best_model, newdata = model_data$train)
sqrt(calc_mse(y_actual = y_train, y_predicted = step_predictions))
x_train <- model.matrix(lm(formula = crim ~ .,
data = model_data$train))[,-1]
r_train <- cv.glmnet(x = x_train, y = y_train, alpha = 0)
ridge_predictions <- predict(r_train, newx = x_train) %>% as.vector()
ridge_predictions
sqrt(calc_mse(y_actual = y_train, y_predicted = ridge_predictions))
n_predictors <- ncol(model_data$train) - 1
# empty data frame to store the results.
results <- data.frame(matrix(NA, ncol = 3, nrow = n_predictors))
colnames(results) <- c("Variables", "adjusted_r2", "mse")
for(k in 1:n_predictors) {
#browser()
predictor_combinations <- regsubsets(crim ~ .,
data = model_data$train,
nvmax = k, intercept = FALSE)
# Fit models for each combination and obtain adjusted R-squared and MSE
models <- summary(predictor_combinations)
adj_r_squared_values <- models$rsq
# Find the index of the model with the highest adjusted R-squared
best_model_index <- which.max(adj_r_squared_values)
# Extract the names of selected predictors
selected_predictors <- names(coef(predictor_combinations, id = best_model_index))
# Fit a linear model using the selected predictors
lm_model <- lm(crim ~ .,
data = model_data$train[,c("crim", selected_predictors)])
# Calculate MSE
y_predicted <- predict(lm_model, newdata = model_data$train)
mse_value <- mean((model_data$train$crim - y_predicted)^2)
# Store results for the current k
results[k, 1] <- length(names(coef(predictor_combinations, id = best_model_index)))
results[k, 2] <- adj_r_squared_values[best_model_index]
results[k, 3] <- mse_value
}
step_results <- results
step_results
pcr_model <- pcr(crim ~ . -1, data = model_data$train,
validation = "CV")
pcr_r_squared <- pls::R2(pcr_model)$val %>%
data.frame() %>%
pivot_longer(cols = everything(),
names_to = "component",
values_to = "r_squared") %>%
slice(-1)
pcr_rmse <- pls::RMSEP(pcr_model)$val %>%
data.frame() %>%
slice(-1) %>%
pivot_longer(cols = everything(),
names_to = "component",
values_to = "rmse") %>%
slice(-1) %>%
dplyr::select(rmse)
pcr_results <- bind_cols(pcr_r_squared, pcr_rmse)
View(plsr_results)
plsr_model <- plsr(crim ~ ., data = model_data$train,
validation = "CV")
plsr_r_squared <- pls::R2(plsr_model)$val %>%
data.frame() %>%
pivot_longer(cols = everything(),
names_to = "component",
values_to = "r_squared") %>%
slice(-1)
plsr_mse <- pls::RMSEP(plsr_model)$val %>%
data.frame() %>%
slice(-1) %>%
pivot_longer(cols = everything(),
names_to = "component",
values_to = "rmse") %>%
slice(-1) %>%
dplyr::select(rmse)
plsr_results <- bind_cols(pcr_r_squared, pcr_rmse)
plsr_model <- plsr(crim ~ ., data = model_data$train,
validation = "CV")
plsr_r_squared <- pls::R2(plsr_model)$val %>%
data.frame() %>%
pivot_longer(cols = everything(),
names_to = "component",
values_to = "r_squared") %>%
slice(-1)
plsr_rmse <- pls::RMSEP(plsr_model)$val %>%
data.frame() %>%
slice(-1) %>%
pivot_longer(cols = everything(),
names_to = "component",
values_to = "rmse") %>%
slice(-1) %>%
dplyr::select(rmse)
plsr_results <- bind_cols(plsr_r_squared, plsr_rmse)
r_squared_data <- cbind(vars = step_results$Variables,
step_r2 = step_results$adjusted_r2,
pcr_r2 = pcr_results$r_squared,
plsr_r2 = plsr_results$r_squared) %>%
as.data.frame()
ggplot(data = r_squared_data, aes(x = vars, y = step_r2)) +
geom_line(color = "red") +
geom_line(mapping = aes(y = pcr_r2), color = "blue") +
geom_line(mapping = aes(y = plsr_r2), color = "purple") +
labs(x = "Number of Variables", y = "Adjusted R-Squared")
pcr_model <- pcr(crim ~ . -1, data = model_data$train,
validation = "CV", scaled = TRUE)
pcr_r_squared <- pls::R2(pcr_model)$val %>%
data.frame() %>%
pivot_longer(cols = everything(),
names_to = "component",
values_to = "r_squared") %>%
slice(-1)
pcr_rmse <- pls::RMSEP(pcr_model)$val %>%
data.frame() %>%
slice(-1) %>%
pivot_longer(cols = everything(),
names_to = "component",
values_to = "rmse") %>%
slice(-1) %>%
dplyr::select(rmse)
pcr_results <- bind_cols(pcr_r_squared, pcr_rmse)
plsr_model <- plsr(crim ~ ., data = model_data$train,
validation = "CV", scaled = TRUE)
plsr_r_squared <- pls::R2(plsr_model)$val %>%
data.frame() %>%
pivot_longer(cols = everything(),
names_to = "component",
values_to = "r_squared") %>%
slice(-1)
plsr_rmse <- pls::RMSEP(plsr_model)$val %>%
data.frame() %>%
slice(-1) %>%
pivot_longer(cols = everything(),
names_to = "component",
values_to = "rmse") %>%
slice(-1) %>%
dplyr::select(rmse)
plsr_results <- bind_cols(plsr_r_squared, plsr_rmse)
r_squared_data <- cbind(vars = step_results$Variables,
step_r2 = step_results$adjusted_r2,
pcr_r2 = pcr_results$r_squared,
plsr_r2 = plsr_results$r_squared) %>%
as.data.frame()
ggplot(data = r_squared_data, aes(x = vars, y = step_r2)) +
geom_line(color = "red") +
geom_line(mapping = aes(y = pcr_r2), color = "blue") +
geom_line(mapping = aes(y = plsr_r2), color = "purple") +
labs(x = "Number of Variables", y = "Adjusted R-Squared")
rmse_data <- cbind(vars = step_results$Variables,
step_r2 = step_results$mse,
pcr_r2 = pcr_results$rmse,
plsr_r2 = plsr_results$rmse) %>%
as.data.frame()
ggplot(data = r_squared_data, aes(x = vars, y = step_r2)) +
geom_line(color = "red") +
geom_line(mapping = aes(y = pcr_r2), color = "blue") +
geom_line(mapping = aes(y = plsr_r2), color = "purple") +
labs(x = "Number of Variables", y = "Adjusted R-Squared")
ggplot(data = rmse_data, aes(x = vars, y = step_r2)) +
geom_line(color = "red") +
geom_line(mapping = aes(y = pcr_r2), color = "blue") +
geom_line(mapping = aes(y = plsr_r2), color = "purple") +
labs(x = "Number of Variables", y = "Adjusted R-Squared")
n_predictors <- ncol(model_data$train) - 1
# empty data frame to store the results.
results <- data.frame(matrix(NA, ncol = 3, nrow = n_predictors))
colnames(results) <- c("Variables", "adjusted_r2", "mse")
for(k in 1:n_predictors) {
#browser()
predictor_combinations <- regsubsets(crim ~ .,
data = model_data$train,
nvmax = k, intercept = FALSE)
# Fit models for each combination and obtain adjusted R-squared and MSE
models <- summary(predictor_combinations)
adj_r_squared_values <- models$rsq
# Find the index of the model with the highest adjusted R-squared
best_model_index <- which.max(adj_r_squared_values)
# Extract the names of selected predictors
selected_predictors <- names(coef(predictor_combinations, id = best_model_index))
# Fit a linear model using the selected predictors
lm_model <- lm(crim ~ .,
data = model_data$train[,c("crim", selected_predictors)])
# Calculate MSE
y_predicted <- predict(lm_model, newdata = model_data$train)
rmse_value <- sqrt(mean((model_data$train$crim - y_predicted)^2))
# Store results for the current k
results[k, 1] <- length(names(coef(predictor_combinations, id = best_model_index)))
results[k, 2] <- adj_r_squared_values[best_model_index]
results[k, 3] <- rmse_value
}
step_results <- results
step_results
n_predictors <- ncol(model_data$train) - 1
# empty data frame to store the results.
results <- data.frame(matrix(NA, ncol = 3, nrow = n_predictors))
colnames(results) <- c("Variables", "adjusted_r2", "rmse")
for(k in 1:n_predictors) {
#browser()
predictor_combinations <- regsubsets(crim ~ .,
data = model_data$train,
nvmax = k, intercept = FALSE)
# Fit models for each combination and obtain adjusted R-squared and MSE
models <- summary(predictor_combinations)
adj_r_squared_values <- models$rsq
# Find the index of the model with the highest adjusted R-squared
best_model_index <- which.max(adj_r_squared_values)
# Extract the names of selected predictors
selected_predictors <- names(coef(predictor_combinations, id = best_model_index))
# Fit a linear model using the selected predictors
lm_model <- lm(crim ~ .,
data = model_data$train[,c("crim", selected_predictors)])
# Calculate MSE
y_predicted <- predict(lm_model, newdata = model_data$train)
rmse_value <- sqrt(mean((model_data$train$crim - y_predicted)^2))
# Store results for the current k
results[k, 1] <- length(names(coef(predictor_combinations, id = best_model_index)))
results[k, 2] <- adj_r_squared_values[best_model_index]
results[k, 3] <- rmse_value
}
step_results <- results
step_results
rmse_data <- cbind(vars = step_results$Variables,
step_r2 = step_results$mse,
pcr_r2 = pcr_results$rmse,
plsr_r2 = plsr_results$rmse) %>%
as.data.frame()
ggplot(data = rmse_data, aes(x = vars, y = step_r2)) +
geom_line(color = "red") +
geom_line(mapping = aes(y = pcr_r2), color = "blue") +
geom_line(mapping = aes(y = plsr_r2), color = "purple") +
labs(x = "Number of Variables", y = "Adjusted R-Squared")
rmse_data <- cbind(vars = step_results$Variables,
step_rmse = step_results$rmse,
pcr_rmse = pcr_results$rmse,
plsr_rmse = plsr_results$rmse) %>%
as.data.frame()
ggplot(data = rmse_data, aes(x = vars, y = step_r2)) +
geom_line(color = "red") +
geom_line(mapping = aes(y = pcr_r2), color = "blue") +
geom_line(mapping = aes(y = plsr_r2), color = "purple") +
labs(x = "Number of Variables", y = "Adjusted R-Squared")
rmse_data <- cbind(vars = step_results$Variables,
step_rmse = step_results$rmse,
pcr_rmse = pcr_results$rmse,
plsr_rmse = plsr_results$rmse) %>%
as.data.frame()
ggplot(data = rmse_data, aes(x = vars, y = step_rmse)) +
geom_line(color = "red") +
geom_line(mapping = aes(y = pcr_rmse), color = "blue") +
geom_line(mapping = aes(y = plsr_rmse), color = "purple") +
labs(x = "Number of Variables", y = " RMSE")
pcr_r_squared <- pls::R2(pcr_model, estimate = "train")$val %>%
data.frame() %>%
pivot_longer(cols = everything(),
names_to = "component",
values_to = "r_squared") %>%
slice(-1)
pcr_rmse <- pls::RMSEP(pcr_model, estimate = "adjCV")$val %>%
data.frame() %>%
pivot_longer(cols = everything(),
names_to = "component",
values_to = "rmse") %>%
slice(-1) %>%
dplyr::select(rmse)
pcr_results <- bind_cols(pcr_r_squared, pcr_rmse)
pcr_results
pcr_r_squared <- pls::R2(pcr_model, estimate = "test",
newdata = model_data$test)$val %>%
data.frame() %>%
pivot_longer(cols = everything(),
names_to = "component",
values_to = "r_squared") %>%
slice(-1)
pcr_rmse <- pls::RMSEP(pcr_model, estimate = "test",
newdata = model_data$test)$val %>%
data.frame() %>%
pivot_longer(cols = everything(),
names_to = "component",
values_to = "rmse") %>%
slice(-1) %>%
dplyr::select(rmse)
pcr_results <- bind_cols(pcr_r_squared, pcr_rmse)
View(pcr_results)
plsr_r_squared <- pls::R2(plsr_model, estimate = "test",
newdata = model_data$test)$val %>%
data.frame() %>%
pivot_longer(cols = everything(),
names_to = "component",
values_to = "r_squared") %>%
slice(-1)
plsr_rmse <- pls::RMSEP(plsr_model, estimate = "test",
newdata = model_data$test)$val %>%
data.frame() %>%
pivot_longer(cols = everything(),
names_to = "component",
values_to = "rmse") %>%
slice(-1) %>%
dplyr::select(rmse)
plsr_results <- bind_cols(plsr_r_squared, plsr_rmse)
View(plsr_results)
r_squared_data <- cbind(vars = step_results$Variables,
step_r2 = step_results$adjusted_r2,
pcr_r2 = pcr_results$r_squared,
plsr_r2 = plsr_results$r_squared) %>%
as.data.frame()
ggplot(data = r_squared_data, aes(x = vars, y = step_r2)) +
geom_line(color = "red") +
geom_line(mapping = aes(y = pcr_r2), color = "blue") +
geom_line(mapping = aes(y = plsr_r2), color = "purple") +
labs(x = "Number of Variables", y = "Adjusted R-Squared")
rmse_data <- cbind(vars = step_results$Variables,
step_rmse = step_results$rmse,
pcr_rmse = pcr_results$rmse,
plsr_rmse = plsr_results$rmse) %>%
as.data.frame()
ggplot(data = rmse_data, aes(x = vars, y = step_rmse)) +
geom_line(color = "red") +
geom_line(mapping = aes(y = pcr_rmse), color = "blue") +
geom_line(mapping = aes(y = plsr_rmse), color = "purple") +
labs(x = "Number of Variables", y = " RMSE")
